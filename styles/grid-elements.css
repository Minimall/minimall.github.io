/* Swiss Typographic Grid Styles */
:root {
  --grid-columns: 12;
  --grid-rows: 24; /* More rows to accommodate spacing */
  --grid-gap: 4vw; /* Increased gap to ensure no overlaps */
  --grid-margin: 5vw; /* Larger margin for better edge spacing */
  --grid-module: 2vw; /* Larger base module size for spacing */
  --viewport-padding: 60px; /* Safe distance from viewport edges */
}

.grid-container {
  display: grid;
  grid-template-columns: repeat(var(--grid-columns), 1fr);
  grid-template-rows: repeat(var(--grid-rows), minmax(60px, auto));
  gap: var(--grid-gap);
  padding: var(--grid-margin);
  margin: 0 auto;
  width: auto; /* Allow container to size based on content */
  max-width: calc(100vw - (var(--viewport-padding) * 2)); /* Prevent viewport edge overlap */
  position: relative;
  margin-bottom: 10vw;
  margin-left: var(--viewport-padding);
  margin-right: var(--viewport-padding);
  isolation: isolate; /* Create stacking context to prevent overlap issues */
  box-sizing: border-box; /* Include padding in width calculation */
}

.grid-item {
    cursor: pointer;
    position: relative;
    z-index: 2;
    overflow: hidden;
    border-radius: 4px;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: transparent;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    /* Ensure the grid item doesn't overflow the viewport */
    max-width: calc(100vw - (var(--viewport-padding) * 2));
    box-sizing: border-box;
    /* Force grid items to respect container boundaries */
    width: 100%;
    height: auto;
}

.grid-item {
  transition: transform 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.grid-item:hover {
  transform: scale(1.03);
}

.grid-item img, 
.grid-item video {
  width: 100%;
  height: 100%;
  object-fit: contain;
  display: block;
  box-sizing: border-box;
  position: relative;
}

/* Ensure grid item inherits aspect ratio from its child media */
.grid-item {
  /* Will be set dynamically by JavaScript */
  aspect-ratio: auto;
  /* Default fallback if JS fails */
  aspect-ratio: 16/9;
}

/* Set aspect ratio based on child element */
.grid-item:has(img[src$=".jpg"]), 
.grid-item:has(img[src$=".jpeg"]), 
.grid-item:has(img[src$=".png"]), 
.grid-item:has(img[src$=".webp"]), 
.grid-item:has(img[src$=".avif"]) {
  aspect-ratio: var(--item-aspect-ratio, 16/9);
}

/* Ensure containers and images are not smaller than 360px */
.grid-item {
  min-width: 360px;
  min-height: 360px;
}

.grid-item img,
.grid-item video {
  min-width: 360px;
  min-height: 360px;
  /* Ensure contained media respects parent container */
  max-width: 100%;
  max-height: 100%;
}

/* Media container must never overlap viewport edges */
@media (min-width: 1201px) {
  .grid-item {
    max-width: calc(100vw - (var(--viewport-padding) * 2));
    margin-left: auto;
    margin-right: auto;
  }
}

/* Grid items will be positioned dynamically via JavaScript 
   for better control over layout and to prevent overlaps */
.grid-item {
  position: relative;
  z-index: 1;
  /* Will have grid-column and grid-row set by JavaScript */
  transition: all 0.3s ease;
}

/* Give each grid item a slight interaction effect */
.grid-item:hover {
  z-index: 2;
}

/* Media queries for responsive design */
@media (max-width: 1200px) {
  :root {
    --grid-columns: 8;
    --grid-rows: 32; /* Many more rows to ensure proper spacing */
    --grid-gap: 4vw; /* Larger gap for tablet to prevent overlaps */
    --grid-module: 2vw; /* Larger module size for tablet */
  }
  
  /* All grid positions will be handled by JS for tablet view */
  .grid-container {
    padding: 5vw;
    margin-left: 4vw;
    margin-right: 4vw;
  }
  
  /* Remove any leftover margin/positioning that might cause overlaps */
  .grid-item {
    margin: 0;
    transform: none !important;
  }
}

@media (max-width: 788px) {
  :root {
    --grid-columns: 4;
    --grid-rows: 24;
    --grid-gap: 5vw; /* Increased gap for mobile */
    --grid-margin: 5vw;
    --grid-module: 3vw; /* Larger module size for mobile */
  }

  .grid-item {
    grid-column: 1 / span 4 !important;
    grid-row: auto !important;
    margin: 0 !important;
    transform: none !important;
    height: auto;
    min-width: 40%;
    min-height: 40%;
  }

  .item-1 { grid-row: 1 / span 2 !important; }
  .item-2 { grid-row: 3 / span 2 !important; }
  .item-3 { grid-row: 5 / span 2 !important; }
  .item-4 { grid-row: 7 / span 2 !important; }
  .item-5 { grid-row: 9 / span 2 !important; }
  .item-6 { grid-row: 11 / span 2 !important; }
  .item-7 { grid-row: 13 / span 2 !important; }
  .item-8 { grid-row: 15 / span 2 !important; }
  .item-9 { grid-row: 17 / span 2 !important; }
  .item-10 { grid-row: 19 / span 2 !important; }
  .item-11 { grid-row: 21 / span 2 !important; }
  .item-12 { grid-row: 23 / span 2 !important; }
}
/* Mobile-specific enhancements for grid items */
@media (max-width: 788px) {
    .grid-item {
        position: relative;
        transition: transform 0.2s ease, opacity 0.2s ease;
    }

    .grid-item:active {
        opacity: 0.9;
        transform: scale(0.98);
    }

    /* Add a subtle overlay to indicate touchability */
    .grid-item::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: transparent;
        z-index: 1;
    }
}