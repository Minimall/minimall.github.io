<!DOCTYPE html>
<html>
<head>
  <style>
    @property --t {
      syntax: "<integer>";
      initial-value: 0;
      inherits: true;
    }
    
    body {
      background: #f5f5f5;
      display: grid;
      place-items: center;
      margin: 0;
      min-height: 100vh;
      overflow-x: hidden;
    }

    main {
      display: grid;
      gap: 0px 6px;
      font-size: 10px;
      font-family: monospace;
      padding: 2rem;
      --t: 0;
      width: fit-content;
    }
    
    main:hover {
      animation: tick 86400000ms linear infinite;
    }
    
    @keyframes tick {
      from { --t: 0 }
      to { --t: 86400000 }
    }
    
    .cell {
      width: 1em;
      height: 1em;
      display: flex;
      align-items: center;
      justify-content: center;
      color: #000;
    }

    main:hover .cell {
      color: var(--color-calc);
    }
  </style>
</head>
<body>
  <main></main>

  <script>
    const text = "dmytro.now.";
    const cellWidth = 16; // Cell width including gap (10px font + 6px gap)
    const minCols = 20; // Minimum number of columns to ensure text is readable
    
    function createGrid() {
      const main = document.querySelector('main');
      main.innerHTML = ''; // Clear existing grid
      
      // Calculate available width and number of columns
      const availableWidth = window.innerWidth - 80; // Subtract padding
      const maxCols = Math.floor(availableWidth / cellWidth);
      const cols = Math.max(minCols, maxCols);
      const rows = 16; // Keep original number of rows
      const n = cols * rows;
      
      main.style.gridTemplateColumns = `repeat(${cols}, 1fr)`;
      
      const fragment = document.createDocumentFragment();
      
      for (let i = 0; i < n; i++) {
        const x = ((i + 1) % cols) / cols;
        const y = (rows - Math.floor(i / cols)) / rows;
        
        const div = document.createElement('div');
        div.className = 'cell';
        div.textContent = text[i % text.length];
        
        div.style.cssText = `
          --x: ${x};
          --y: ${y};
          --offset-x: calc(var(--x) - 0.5);
          --abs-x: calc(max(var(--offset-x), -1 * var(--offset-x)));
          --offset-y: calc(var(--y) - 0.5);
          --abs-y: calc(max(var(--offset-y), -1 * var(--offset-y)));
          --l: calc(85% - sin(var(--abs-x) / sin(var(--abs-y) * 3.6) * 3 - var(--t) / 400) * 35%);
          --h: calc(200deg + var(--abs-x) * 160deg);
          --color-calc: hsl(var(--h) 70% min(var(--l), 95%));
        `;
        
        fragment.appendChild(div);
      }
      
      main.appendChild(fragment);
    }
    
    // Initial creation
    createGrid();
    
    // Debounce function to limit resize calculations
    function debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }
    
    // Handle window resize
    window.addEventListener('resize', debounce(() => {
      createGrid();
    }, 150));
  </script>
</body>
</html>